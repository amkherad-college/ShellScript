using System;
using System.Collections.Generic;
using System.Linq;
using ShellScript.Core.Language.CompilerServices.Statements;
using ShellScript.Core.Language.Sdk;

namespace ShellScript.Core.Language.CompilerServices.Transpiling
{
    public class Context
    {
        public Scope GeneralScope { get; }

        public IPlatform Platform { get; }
        public IPlatformStatementTranspiler[] Transpilers { get; }
        public ISdk Sdk { get; }

        private readonly Dictionary<Type, IPlatformStatementTranspiler> _typeTranspilers;

        private readonly Dictionary<Type, Type> _fallbackType = new Dictionary<Type, Type>
        {
            {typeof(ConstantValueStatement), typeof(EvaluationStatement)},
            {typeof(ArithmeticEvaluationStatement), typeof(EvaluationStatement)},
            {typeof(AssignmentStatement), typeof(EvaluationStatement)},
            {typeof(BitwiseEvaluationStatement), typeof(EvaluationStatement)},
            {typeof(DecrementStatement), typeof(EvaluationStatement)},
            //{typeof(DoWhileStatement), typeof(ConditionalBlockStatement)},
            //{typeof(ForStatement), typeof(ConditionalBlockStatement)},
            {typeof(FunctionCallStatement), typeof(EvaluationStatement)},
            //{typeof(FunctionParameterDefinitionStatement), typeof(DefinitionStatement)},
            {typeof(IncrementStatement), typeof(EvaluationStatement)},
            {typeof(LogicalEvaluationStatement), typeof(EvaluationStatement)},
            {typeof(NopStatement), typeof(EvaluationStatement)},
            {typeof(SdkFunctionCallStatement), typeof(FunctionCallStatement)},
            {typeof(VariableAccessStatement), typeof(EvaluationStatement)},
            //{typeof(VariableDefinitionStatement), typeof(DefinitionStatement)},
            //{typeof(WhileStatement), typeof(ConditionalBlockStatement)},
        };

        public bool WriteAutoGeneratedCodeNotice { get; set; } = true;
        public string Author { get; set; }
        public string ContactInfo { get; set; }
        public string WikiUrl { get; set; }


        public Context(IPlatform platform)
        {
            GeneralScope = new Scope(this);

            Platform = platform;
            Transpilers = platform.Transpilers;
            Sdk = platform.Sdk;

            _typeTranspilers = Transpilers.ToDictionary(key => key.StatementType);
        }

        public IPlatformMetaInfoTranspiler GetMetaInfoTranspiler()
        {
            return Platform.MetaInfoWriter;
        }

        public IPlatformStatementTranspiler GetTranspilerForStatement(IStatement statement)
        {
            var sttType = statement.GetType();
            if (_typeTranspilers.TryGetValue(sttType, out var value))
            {
                return value;
            }

            if (_fallbackType.TryGetValue(sttType, out sttType))
            {
                if (_typeTranspilers.TryGetValue(sttType, out value))
                {
                    return value;
                }
            }

            throw new InvalidOperationException();
        }

        public IPlatformEvaluationStatementTranspiler GetEvaluationTranspilerForStatement(EvaluationStatement statement)
        {
            var sttType = statement.GetType();
            if (_typeTranspilers.TryGetValue(statement.GetType(), out var value))
            {
                return value as IPlatformEvaluationStatementTranspiler;
            }

            if (_fallbackType.TryGetValue(sttType, out sttType))
            {
                if (_typeTranspilers.TryGetValue(sttType, out value))
                {
                    return value as IPlatformEvaluationStatementTranspiler;
                }
            }

            throw new InvalidOperationException();
        }


        public TTranspiler GetTranspiler<TTranspiler, TStatement>()
            where TTranspiler : IPlatformStatementTranspiler
        {
            var sttType = typeof(TStatement);
            if (_typeTranspilers.TryGetValue(sttType, out var value))
            {
                return (TTranspiler) value;
            }

            if (_fallbackType.TryGetValue(sttType, out sttType))
            {
                if (_typeTranspilers.TryGetValue(sttType, out value))
                {
                    return (TTranspiler) value;
                }
            }

            throw new InvalidOperationException();
        }

        public TTranspiler GetTranspiler<TTranspiler>()
            where TTranspiler : IPlatformStatementTranspiler
        {
            return Transpilers.OfType<TTranspiler>().FirstOrDefault();
        }


        public bool IsSdkFunctionExists(string objectName, string functionName)
            => IsSdkFunctionExists(objectName, functionName, -1);

        public bool IsSdkFunctionExists(string objectName, string functionName, int numberOfParameters)
        {
            if (!Sdk.TryGetClass(objectName, out var sdkClass))
            {
                return false;
            }

            if (!sdkClass.TryGetFunction(functionName, out var sdkFunction))
            {
                return false;
            }

            if (numberOfParameters != -1)
            {
                return sdkFunction.Parameters.Length == numberOfParameters;
            }

            return true;
        }


        public bool IsSdkFunctionExists(string functionName)
            => IsSdkFunctionExists(functionName, -1);


        public bool IsSdkFunctionExists(string functionName, int numberOfParameters)
        {
            if (!Sdk.TryGetGeneralFunction(functionName, out var sdkFunction))
            {
                return false;
            }

            if (numberOfParameters != -1)
            {
                return sdkFunction.Parameters.Length == numberOfParameters;
            }

            return true;
        }
    }
}