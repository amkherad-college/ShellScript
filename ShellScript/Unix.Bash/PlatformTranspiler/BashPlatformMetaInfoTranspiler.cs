using System.IO;
using ShellScript.Core;
using ShellScript.Core.Language.CompilerServices.Transpiling;

namespace ShellScript.Unix.Bash.PlatformTranspiler
{
    public class BashPlatformMetaInfoTranspiler : IPlatformMetaInfoTranspiler
    {
        public void WritePrologue(Context context, TextWriter writer)
        {
            //https://stackoverflow.com/questions/10376206/what-is-the-preferred-bash-shebang
            writer.WriteLine("#!/usr/bin/env bash"); 

            writer.Write("#ShellScript v");
            writer.Write(ApplicationContext.Version);
            writer.Write(" - [");
            writer.Write(ApplicationContext.Url);
            writer.WriteLine("]");
            
//            if (context.WriteAutoGeneratedCodeNotice)
//            {
//                writer.Write("#NOTICE: This file generated automatically with a transpiler tool, ");
//                writer.Write("use of this code requires you to accept the terms available at [");
//                writer.Write(ApplicationContext.Url);
//                writer.WriteLine("].");
//            }

            if (!string.IsNullOrWhiteSpace(context.Author))
            {
                writer.Write("Author: ");
                writer.WriteLine(context.Author);
            }

            if (!string.IsNullOrWhiteSpace(context.ContactInfo))
            {
                writer.Write("ContactInfo: ");
                writer.WriteLine(context.ContactInfo);
            }

            if (!string.IsNullOrWhiteSpace(context.WikiUrl))
            {
                writer.Write("Wiki: ");
                writer.WriteLine(context.WikiUrl);
            }

            if (context.Flags.UseSegments)
            {
                BashTranspilerHelpers.WriteSeparator(writer);
            }
        }

        public void WriteEpilogue(Context context, TextWriter writer)
        {
        }

        
        public void WriteComment(Context context, TextWriter writer, string comment)
        {
            BashTranspilerHelpers.WriteComment(writer, comment);
        }

        public void WriteSeparator(Context context, TextWriter writer)
        {
            BashTranspilerHelpers.WriteSeparator(writer);
        }
    }
}